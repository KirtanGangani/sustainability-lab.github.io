#!/usr/bin/env python3
"""
BibTeX Aggregator for Sustainability Lab Publications

This script automatically aggregates all individual .bib files in the bibtex/ directory
into a comprehensive all_publications.bib file, organized by year.

Usage:
    python aggregate_bibtex.py

The script will:
1. Read all .bib files in the bibtex/ directory (except all_publications.bib)
2. Parse and extract publication year from each entry
3. Sort publications by year (newest first)
4. Generate a comprehensive bibliography file with year sections
5. Validate BibTeX format and report any issues

Author: Sustainability Lab, IIT Gandhinagar
"""

import os
import re
import glob
from pathlib import Path
from datetime import datetime
from collections import defaultdict


def parse_bibtex_entry(content):
    """Parse a BibTeX entry and extract key information."""
    # Extract citation key
    key_match = re.search(r'@\w+\s*\{\s*([^,\s]+)', content, re.IGNORECASE)
    citation_key = key_match.group(1) if key_match else "unknown"
    
    # Extract year
    year_match = re.search(r'year\s*=\s*[{\"]?(\d{4})[}\"]?', content, re.IGNORECASE)
    year = int(year_match.group(1)) if year_match else 9999  # Unknown years go to end
    
    # Extract title for debugging
    title_match = re.search(r'title\s*=\s*[{\"]([^}\"]+)[}\"]', content, re.IGNORECASE)
    title = title_match.group(1) if title_match else "Unknown title"
    
    return {
        'citation_key': citation_key,
        'year': year,
        'title': title,
        'content': content.strip()
    }


def read_bibtex_files(bibtex_dir):
    """Read all individual .bib files and parse entries."""
    entries = []
    bibtex_path = Path(bibtex_dir)
    
    if not bibtex_path.exists():
        print(f"Error: Directory {bibtex_dir} does not exist!")
        return entries
    
    # Get all .bib files except the aggregated one
    bib_files = [f for f in bibtex_path.glob("*.bib") 
                 if f.name != "all_publications.bib"]
    
    print(f"Found {len(bib_files)} individual .bib files")
    
    for bib_file in sorted(bib_files):
        try:
            with open(bib_file, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                
            if content:
                entry = parse_bibtex_entry(content)
                entry['filename'] = bib_file.name
                entries.append(entry)
                print(f"  ‚úì {bib_file.name}: {entry['title'][:50]}... ({entry['year']})")
            else:
                print(f"  ‚ö† {bib_file.name}: Empty file")
                
        except Exception as e:
            print(f"  ‚úó Error reading {bib_file.name}: {e}")
    
    return entries


def group_by_year(entries):
    """Group entries by publication year."""
    year_groups = defaultdict(list)
    
    for entry in entries:
        year_groups[entry['year']].append(entry)
    
    # Sort entries within each year by citation key
    for year in year_groups:
        year_groups[year].sort(key=lambda x: x['citation_key'])
    
    return year_groups


def generate_comprehensive_bibtex(year_groups, output_file):
    """Generate the comprehensive bibliography file."""
    
    header = f"""% Comprehensive Bibliography - Sustainability Lab Publications
% IIT Gandhinagar
% 
% This file is automatically generated by aggregate_bibtex.py
% Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
% 
% Total publications: {sum(len(entries) for entries in year_groups.values())}
% Years covered: {min(year_groups.keys()) if year_groups else 'N/A'}-{max(year_groups.keys()) if year_groups else 'N/A'}
%
% DO NOT EDIT THIS FILE MANUALLY - it will be overwritten
% Instead, edit individual .bib files and run aggregate_bibtex.py

"""
    
    content = [header]
    
    # Sort years in descending order (newest first)
    sorted_years = sorted(year_groups.keys(), reverse=True)
    
    for year in sorted_years:
        if year == 9999:
            content.append(f"\n% ==========================================\n")
            content.append(f"% PUBLICATIONS WITH UNKNOWN YEAR\n")
            content.append(f"% ==========================================\n\n")
        else:
            content.append(f"\n% ==========================================\n")
            content.append(f"% {year} PUBLICATIONS\n")
            content.append(f"% ==========================================\n\n")
        
        for entry in year_groups[year]:
            content.append(entry['content'])
            content.append('\n\n')
    
    # Write to file
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(''.join(content))
        
        total_entries = sum(len(entries) for entries in year_groups.values())
        print(f"\n‚úì Successfully generated {output_file}")
        print(f"  - Total entries: {total_entries}")
        print(f"  - Years: {min(sorted_years)}-{max(sorted_years)}")
        print(f"  - File size: {os.path.getsize(output_file)} bytes")
        
        return True
        
    except Exception as e:
        print(f"\n‚úó Error writing {output_file}: {e}")
        return False


def validate_bibtex_entries(entries):
    """Validate BibTeX entries and report issues."""
    issues = []
    
    for entry in entries:
        # Check for required fields
        content = entry['content'].lower()
        
        if 'title' not in content:
            issues.append(f"{entry['filename']}: Missing title field")
        
        if 'author' not in content:
            issues.append(f"{entry['filename']}: Missing author field")
        
        if entry['year'] == 9999:
            issues.append(f"{entry['filename']}: Missing or invalid year field")
        
        # Check for balanced braces
        open_braces = entry['content'].count('{')
        close_braces = entry['content'].count('}')
        if open_braces != close_braces:
            issues.append(f"{entry['filename']}: Unbalanced braces ({open_braces} open, {close_braces} close)")
    
    return issues


def main():
    """Main function to aggregate BibTeX files."""
    script_dir = Path(__file__).parent
    bibtex_dir = script_dir / "bibtex"
    output_file = bibtex_dir / "all_publications.bib"
    
    print("=" * 60)
    print("BibTeX Aggregator - Sustainability Lab Publications")
    print("=" * 60)
    
    # Read individual .bib files
    entries = read_bibtex_files(bibtex_dir)
    
    if not entries:
        print("\n‚úó No valid .bib files found!")
        return 1
    
    # Validate entries
    print(f"\nValidating {len(entries)} entries...")
    issues = validate_bibtex_entries(entries)
    
    if issues:
        print("\n‚ö† Validation issues found:")
        for issue in issues:
            print(f"  - {issue}")
        print("\nContinuing with aggregation...")
    else:
        print("‚úì All entries passed validation")
    
    # Group by year
    year_groups = group_by_year(entries)
    
    # Generate comprehensive file
    print(f"\nGenerating comprehensive bibliography...")
    success = generate_comprehensive_bibtex(year_groups, output_file)
    
    if success:
        print(f"\nüéâ Bibliography aggregation completed successfully!")
        print(f"   Output: {output_file}")
        print(f"\nTo use the comprehensive bibliography:")
        print(f"   - Download: papers/bibtex/all_publications.bib")
        print(f"   - Import into reference manager")
        print(f"   - Use \\bibliography{{all_publications}} in LaTeX")
    else:
        print(f"\n‚ùå Bibliography aggregation failed!")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())